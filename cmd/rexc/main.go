package main

import (
	"flag"
	"fmt"
	"os"

	"rgehrsitz/rex/pkg/compiler"
	"rgehrsitz/rex/pkg/logging"
)

func main() {
	if err := mainFunc(); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

func mainFunc() error {
	config, err := parseFlags(os.Args[1:])
	if err != nil {
		return fmt.Errorf("failed to parse flags: %w", err)
	}

	if err := run(config); err != nil {
		return fmt.Errorf("application failed: %w", err)
	}

	return nil
}

type Config struct {
	JSONFilePath string
	LogLevel     string
	LogOutput    string
}

func parseFlags(args []string) (*Config, error) {
	config := &Config{}
	fs := flag.NewFlagSet("rexc", flag.ContinueOnError)

	// Customize usage message
	fs.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage of rexc:\n")
		fmt.Fprintf(os.Stderr, "  rexc [flags]\n\n")
		fmt.Fprintf(os.Stderr, "Flags:\n")
		fs.PrintDefaults()
		fmt.Fprintf(os.Stderr, "\nExample:\n")
		fmt.Fprintf(os.Stderr, "  rexc -rules input_rules.json -loglevel debug -logoutput file\n")
	}

	fs.StringVar(&config.JSONFilePath, "rules", "", "Path to the input JSON file (required)")
	fs.StringVar(&config.LogLevel, "loglevel", "info", "Set log level: panic, fatal, error, warn, info, debug, trace")
	fs.StringVar(&config.LogOutput, "logoutput", "console", "Set log output: console or file")

	err := fs.Parse(args)
	if err != nil {
		return nil, fmt.Errorf("failed to parse flags: %w", err)
	}

	if config.JSONFilePath == "" {
		fs.Usage()
		return nil, fmt.Errorf("input JSON file path is required (use -rules flag)")
	}

	return config, nil
}

func run(config *Config) error {
	if err := logging.ConfigureLogger(config.LogLevel, config.LogOutput); err != nil {
		return fmt.Errorf("failed to configure logger: %w", err)
	}

	jsonData, err := readJSONFile(config.JSONFilePath)
	if err != nil {
		return fmt.Errorf("failed to read JSON file: %w", err)
	}

	ruleset, err := compiler.Parse(jsonData)
	if err != nil {
		return fmt.Errorf("failed to parse JSON file: %w", err)
	}

	bytecodeFile := compiler.GenerateBytecode(ruleset)

	fmt.Println("Generated Bytecode:")

	outputFilename := "output.bytecode"
	if err := compiler.WriteBytecodeToFile(outputFilename, bytecodeFile); err != nil {
		return fmt.Errorf("failed to write bytecode to file: %w", err)
	}

	fmt.Println("Successfully generated bytecode and wrote to file")
	return nil
}

func readJSONFile(filepath string) ([]byte, error) {
	return os.ReadFile(filepath)
}
